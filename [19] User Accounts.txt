					+---------------------------------------------+
					|                                             |
					|          Chapter 19: User Accounts          |
					|                                             |
					+---------------------------------------------+

*** Allowing Users to Enter Data ***

We’ll use Django’s formbuilding tools to build pages that allow users to enter data.

- Adding New Topics

	Adding a form-based page works in much the same way as the pages we’ve already built:		1.we define a URL,
	2.write a view function,
	3.and write a template. 
	The one major 	difference is the addition of a new module called forms.py, which will 	contain the forms.

	* The Topic ModelForm

		The simplest way to build a form in Django is to use a ModelForm, which
		uses the information from the models we defined in Chapter 18 to automatically
		build a form. Write your first form in the file forms.py, which you
		should create in the same directory as models.py:

		from django import forms
		from .models import Topic

		class TopicForm(forms.ModelForm):
			class Meta:
				model = Topic
				fields = ['text']
				labels = {'text': ''}	

	* The new_topic URL

		When the user wants to add a new topic, we’ll send them to 						http://localhost:8000/new_topic/.
		
		Here’s the URL pattern for the new_topic page, which you add to
		learning_logs/urls.py:

		--snip--
		urlpatterns = [
			--snip--
			# Page for adding a new topic
			path('new_topic/', views.new_topic, name='new_topic'),
		]

	* The new_topic() View Function
	
		The new_topic() function needs to handle two different situations:
		.initial requests for the new_topic page
		.and the processing of any data submitted in the form.
		
		In views.py:
	
		from django.shortcuts import render, redirect
		from .models import Topic
		from .forms import TopicForm
	
		--snip--

		def new_topic(request):
			"""Add a new topic."""
			if request.method != 'POST':
				# No data submitted; create a blank form.
				form = TopicForm()
			else:
				# POST data submitted; process data.
				form = TopicForm(data=request.POST)
				if form.is_valid():
					form.save()
					return redirect('learning_logs:topics')
		
			# Display a blank or invalid form.
			context = {'form': form}
			return render(request, 'learning_logs/new_topic.html', context)

	* The new_topic Template

		Now we’ll make a new template called new_topic.html to display the form we
		just created.

		{% extends "learning_logs/base.html" %}
	
		{% block content %}
		  <p>Add a new topic:</p>

		  <form action="{% url 'learning_logs:new_topic' %}" method='post'>
			{% csrf_token %}
			{{ form.as_p }}
			<button name="submit">Add topic</button>
	  	  </form>

		{% endblock content %}

	* Linking to the new_topic Page

		Next, we include a link to the new_topic page on the topics page. In topic.html:
		
		{% extends "learning_logs/base.html" %}

		{% block content %}

  		  <p>Topics</p>
		
		  <ul>
		  --snip--
		  </ul>
		
		  <a href="{% url 'learning_logs:new_topic' %}">Add a new topic</a>
		
		{% endblock content %}

- Adding New Entries

	* The Entry ModelForm
		
		First, we’ll add another class to forms.py. 
		We need to create a form associated with the Entry model.

		from django import forms
		from .models import Topic, Entry

		class TopicForm(forms.ModelForm):
			--snip--

		class EntryForm(forms.ModelForm):
			class Meta:
				model = Entry
				fields = ['text']
				labels = {'text': 'Entry:'}
				widgets = {'text': forms.Textarea(attrs={'cols': 80})}

	* The new_entry URL

		New entries must be associated with a particular topic, so we need to include
		a topic_id argument in the URL for adding a new entry. Here’s the URL,
		which you add to learning_logs/urls.py:

		--snip--
		urlpatterns = [
			--snip--
			# Page for adding a new entry
			path('new_entry/<int:topic_id>/', views.new_entry, name='new_entry'),
		]

	* The new_entry() View Function

		The view function for new_entry is much like the function for adding a new
		topic. Add the following code to your views.py file:


		from django.shortcuts import render, redirect
		from .models import Topic
		from .forms import TopicForm, EntryForm
		
		--snip--
		
		def new_entry(request, topic_id):
			"""Add a new entry for a particular topic."""
			topic = Topic.objects.get(id=topic_id)
			if request.method != 'POST':
				# No data submitted; create a blank form.
				form = EntryForm()
			else:
				# POST data submitted; process data.
				form = EntryForm(data=request.POST)
				if form.is_valid():
					new_entry = form.save(commit=False)
					new_entry.topic = topic
					new_entry.save()
					return redirect('learning_logs:topic', topic_id=topic_id)
			# Display a blank or invalid form.
			context = {'topic': topic, 'form': form}
			return render(request, 'learning_logs/new_entry.html', context)

	* The new_entry Template

		As you can see in the following code, the template for new_entry is similar to
		the template for new_topic:

		{% extends "learning_logs/base.html" %}
		
		{% block content %}

		  <p><a href="{% url 'learning_logs:topic' topic.id %}">{{ topic }}</a></p>
		  
		  <p>Add a new entry:</p>
		  <form action="{% url 'learning_logs:new_entry' topic.id %}" method='post'>
		    {% csrf_token %}
		    {{ form.as_p }}
		    <button name='submit'>Add entry</button>
		  </form>

		{% endblock content %}

	* Linking to the new_entry Page

		Next, we need to include a link to the new_entry page from each topic page
		in the topic template. In topic.html:

		{% extends "learning_logs/base.html" %}
		
		{% block content %}

		  <p>Topic: {{ topic }}</p>
		  <p>Entries:</p>
		  <p>
			<a href="{% url 'learning_logs:new_entry' topic.id %}">Add new entry</a>
		  </p>

		  <ul>
		    --snip—
		  </ul>

		{% endblock content %}

- Editing Entries

	Now we’ll make a page so users can edit the entries they’ve added.

	* The edit_entry URL
		
		The URL for the page needs to pass the ID of the entry to be edited. 
		Here’s learning_logs/urls.py:

		--snip--
		urlpatterns = [
			--snip--
			# Page for editing an entry.
			path('edit_entry/<int:entry_id>/', views.edit_entry, name='edit_entry'),
		]

	* The edit_entry() View Function

		In viwes.py: 

		from django.shortcuts import render, redirect
		from .models import Topic, Entry
		from .forms import TopicForm, EntryForm

		--snip--	
		
		def edit_entry(request, entry_id):
			"""Edit an existing entry."""
			entry = Entry.objects.get(id=entry_id)
			topic = entry.topic
			if request.method != 'POST':
				# Initial request; pre-fill form with the current entry.
				form = EntryForm(instance=entry)
			else:
				# POST data submitted; process data.
				form = EntryForm(instance=entry, data=request.POST)
				if form.is_valid():
					form.save()
					return redirect('learning_logs:topic', topic_id=topic.id)
			
			context = {'entry': entry, 'topic': topic, 'form': form}
			return render(request, 'learning_logs/edit_entry.html', context)

	* The edit_entry Template
		
		Next, we create an edit_entry.html template:

		{% extends "learning_logs/base.html" %}

		{% block content %}

		  <p><a href="{% url 'learning_logs:topic' topic.id %}">{{ topic }}</a></p>
		  <p>Edit entry:</p>
		  
		  <form action="{% url 'learning_logs:edit_entry' entry.id %}" method='post'>
			{% csrf_token %}
			{{ form.as_p }}
			<button name="submit">Save changes</button>
		  </form>

		{% endblock content %}

	* Linking to the edit_entry Page

		Now we need to include a link to the edit_entry page for each entry on the
		topic page. In topic.html:

		--snip--
		{% for entry in entries %}
		
	       <li>
			<p>{{ entry.date_added|date:'M d, Y H:i' }}</p>
			<p>{{ entry.text|linebreaks }}</p>
			<p>
			<a href="{% url 'learning_logs:edit_entry' entry.id %}">Edit entry</a>
			</p>
		  </li>
		--snip--
------------------------------------------------------------------------------------------

*** Setting Up User Accounts ***

In this section, we’ll set up a user registration and authorization system so
people can register an account and log in and out.

- The users App

	We’ll start by creating a new app called users, using the startapp command:

	(ll_env) ...\learning_log> python manage.py startapp users

	This command makes a new directory called users with a structure
	identical to the learning_logs app.

	* Adding users to settings.py

		We need to add our new app to INSTALLED_APPS in settings.py, like so:
	
		--snip--
		INSTALLED_APPS = [
					# My apps
					'learning_logs',
					'users',
					# Default django apps.
					--snip--
				]
		--snip--

	* Including the URLs from users

		Next, we need to modify the root urls.py so it includes
		the URLs we’ll write for the users app:

		from django.contrib import admin
		from django.urls import path, include

		urlpatterns = [
			path('admin/', admin.site.urls),
			path('users/', include('users.urls')),
			path('', include('learning_logs.urls')),
		]

- The Login Page

	We’ll first implement a login page. We’ll use the default login view Django
	provides, so the URL pattern for this app looks a little different. Make a new
	urls.py file in the directory learning_log/users/, and add the following to it:

	"""Defines URL patterns for users"""
	from django.urls import path, include

	app_name = 'users'
	urlpatterns = [
		# Include default auth urls.
		path('', include('django.contrib.auth.urls')),
	]

	These default URLs include named URL patterns, such as 'login' and 'logout'.

	The login page’s pattern matches the URL http://localhost:8000/users
	/login/. When Django reads this URL, the word users tells Django to look in
	users/urls.py, and login tells it to send requests to Django’s default login view.

	* The login Template

		The default urls.py authentication views look for templates inside a folder 					called registration, so we’ll need to make that folder.

		In the directory /users/templates/registration create the login.html file:

		{% extends "learning_logs/base.html" %}

		{% block content %}

		  {% if form.errors %}
			<p>Your username and password didn't match. Please try again.</p>
		  {% endif %}

		  <form method="post" action="{% url 'users:login' %}">
			{% csrf_token %}
			{{ form.as_p }}

			<button name="submit">Log in</button>
			<input type="hidden" name="next" value="{% url 'learning_logs:index' %}" />
		  </form>
		
		{% endblock content %}

	* Linking to the Login Page

		Let’s add the login link to base.html so it appears on every page. We don’t
		want the link to display when the user is already logged in, so we nest it
		inside an {% if %} tag:
		
		<p>
		  <a href="{% url 'learning_logs:index' %}">Learning Log</a> -
		  <a href="{% url 'learning_logs:topics' %}">Topics</a> -

		  {% if user.is_authenticated %}
			Hello, {{ user.username }}.
		  {% else %}
			<a href="{% url 'users:login' %}">Log in</a>
		  {% endif %}

		</p>

		{% block content %}{% endblock content %}

		In Django’s authentication system, every template has a user variable available !

- Logging Out

	Now we need to provide a way for users to log out. We’ll put a link in base.html
	that logs out users; when they click this link, they’ll go to a page confirming
	that they’ve been logged out.

	* Adding a Logout Link to base.html

		We’ll include it in the {% if user.is_authenticated %} portion so only
		users who are already logged in can see it:

		--snip—
		{% if user.is_authenticated %}
		  Hello, {{ user.username }}.
		  <a href="{% url 'users:logout' %}">Log out</a>
		{% else %}
		--snip--

		The default named URL pattern for logging out is simply 'logout'.

	* The Logout Confirmation Page

		Users will want to know that they’ve successfully logged out,
		so the default logout view renders the page using the template
		logged_out.html, which we’ll create now. 

		Save this file in templates/registration, the same place where you saved login.html:

		{% extends "learning_logs/base.html" %}

		{% block content %}
		  <p>You have been logged out. Thank you for visiting!</p>
		{% endblock content %}

- The Registration Page

	Next, we’ll build a page so new users can register. We’ll use Django’s default 	UserCreationForm but write our own view function and template.

	* The register URL
	
		The following code provides the URL pattern for the registration page,
		again in users/urls.py:

		"""Defines URL patterns for users"""
		from django.urls import path, include
		from . import views

		app_name = 'users'
		urlpatterns = [
			# Include default auth urls.
			path('', include('django.contrib.auth.urls')),
			# Registration page.
			path('register/', views.register, name='register'),
		]

	* The register() View Function

		The register() view function needs to display a blank registration form
		when the registration page is first requested and then process completed
		registration forms when they’re submitted.

		Add the following code to users/views.py:

		from django.shortcuts import render, redirect
		from django.contrib.auth import login
		from django.contrib.auth.forms import UserCreationForm
		# Create your views here.

		def register(request):
			"""Register a new user."""

			if request.method != 'POST':
				# Display blank registration form.
				form = UserCreationForm()
			else:
				# Process completed form.
				form = UserCreationForm(data=request.POST)
				if form.is_valid():
					new_user = form.save()
					# Log the user in and then redirect to home page.
					login(request, new_user)
					return redirect('learning_logs:index')

			# Display a blank or invalid form.
			context = {'form': form}
			return render(request, 'registration/register.html', context)

		The login() function creates a valid session for the new user!

	* The register Template

		Now create a template for the registration page,
		and save it as register.html in the same directory as login.html:

		{% extends "learning_logs/base.html" %}
		
		{% block content %}

		<form method="post" action="{% url 'users:register' %}">
		  {% csrf_token %}
		  {{ form.as_p }}
		  <button name="submit">Register</button>
		  <input type="hidden" name="next" value="{% url 'learning_logs:index' %}" />
		</form>

		{% endblock content %}

	* Linking to the Registration Page

		Next, we’ll add the code to show the registration page link in base.html
		to any user who isn’t currently logged in:

		--snip--
		{% if user.is_authenticated %}
			Hello, {{ user.username }}.
			<a href="{% url 'users:logout' %}">Log out</a>
		{% else %}
			<a href="{% url 'users:register' %}">Register</a> -
			<a href="{% url 'users:login' %}">Log in</a>
		{% endif %}
		--snip--
------------------------------------------------------------------------------------------

*** Allowing Users to Own Their Data ***

- Restricting Access with @login_required

	* Restricting Access to the Topics Page

		Each topic will be owned by a user, so only registered users can request the
		topics page. Add the following code to learning_logs/views.py:

		from django.shortcuts import render, redirect
		from django.contrib.auth.decorators import login_required
		from .models import Topic, Entry

		--snip--
		@login_required
		def topics(request):
			"""Show all topics."""
		--snip--

		We apply login_required() as a decorator to the topics() view function.
		As a result, Python knows to run the code in login_required() before the code in 				topics(). 

		The code in login_required() checks whether a user is logged in, and Django runs
		the code in topics() only if they are. If the user isn’t logged in, they’re
		redirected to the login page.

		To make this redirect work, we need to modify settings.py so Django
		knows where to find the login page. Add the following at the very end
		of settings.py:
	
		--snip--
		# My settings
		LOGIN_URL = 'users:login'
		
		Now when an unauthenticated user requests a page protected by the
		@login_required decorator, Django will send the user to the URL defined
		by LOGIN_URL in settings.py.

	* Restricting Access Throughout Learning Log

		In Learning Log, we’ll keep the home page and the registration page
		unrestricted. We’ll restrict access to every other page.

		Here’s learning_logs/views.py with @login_required decorators applied to
		every view except index():

		--snip--
		@login_required
		def topics(request):
		--snip--

		@login_required
		def topic(request, topic_id):
		--snip--

		@login_required
		def new_topic(request):
		--snip--

		@login_required
		def new_entry(request, topic_id):
		--snip--

		@login_required
		def edit_entry(request, entry_id):
		--snip--

- Connecting Data to Certain Users

	Next, we need to connect the data to the user who submitted it. We need to
	connect only the data highest in the hierarchy to a user, and the lower-level
	data will follow. 

	We’ll modify the Topic model by adding a foreign key relationship to a
	user. We’ll then have to migrate the database. Finally, we’ll modify some of
	the views so they only show the data associated with the currently logged
	in user.

	* Modifying the Topic Model

		The modification to models.py is just two lines:

		from django.db import models
		from django.contrib.auth.models import User

		class Topic(models.Model):
			"""A topic the user is learning about."""
			text = models.CharField(max_length=200)
			date_added = models.DateTimeField(auto_now_add=True)
			owner = models.ForeignKey(User, on_delete=models.CASCADE)
			
			def __str__(self):
				"""Return a string representation of the model."""
				return self.text
		
		class Entry(models.Model):
			--snip--

		We import the User model from django.contrib.auth. Then we add an
		owner field to Topic, which establishes a foreign key relationship
		to the User model.

		When we migrate the database, Django will modify the database so it can
		store a connection between each topic and a user. To make the migration,
		Django needs to know which user to associate with each existing topic...

	* Identifying Existing Users

		Let’s look at the IDs of all users created so far. 
		Start a Django shell session and issue the following commands:

		(ll_env) ...\learning_log> python manage.py shell

		>>> from django.contrib.auth.models import User
		>>> User.objects.all()
		<QuerySet [<User: ll_admin>, <User: eric>, <User: willie>]>
		>>> for user in User.objects.all():
		... 		print(user.username, user.id)
		...
		ll_admin 1
		tnimo 2

	* Migrating the Database

		Now that we know the IDs, we can migrate the database:

		(ll_env) ...\learning_log> python manage.py makemigrations learning_logs
		You are trying to add a non-nullable field 'owner' to topic without a default;
		we can't do that (the database needs something to populate existing rows).
		Please select a fix:
		1) Provide a one-off default now (will be set on all existing rows with a
		null value for this column)
		2) Quit, and let me add a default in models.py
		Select an option: 1
		Please enter the default value now, as valid Python
		The datetime and django.utils.timezone modules are available, so you can do
		e.g. timezone.now
		Type 'exit' to exit this prompt
		>>> 1
		Migrations for 'learning_logs':
			learning_logs/migrations/0003_topic_owner.py
		- Add field owner to topic

		Now we can execute the migration. Enter the following
		in an active virtual environment:

		(ll_env) ...\learning_log> python manage.py migrate
		Operations to perform:
			Apply all migrations: admin, auth, contenttypes, learning_logs, sessions
		Running migrations:
			Applying learning_logs.0003_topic_owner... OK

		Django applies the new migration, and the result is OK !
		We can verify that the migration worked as expected like this:

		(ll_env) ...\learning_log> python manage.py shell
		
		>>> from learning_logs.models import Topic
		>>> for topic in Topic.objects.all():
		...	 print(topic, topic.owner)
		...
		Chess ll_admin
		Rock Climbing ll_admin
		Cooking ll_admin

- Restricting Topics Access to Appropriate Users

	Currently, if you’re logged in, you’ll be able to see all the topics, no matter
	which user you’re logged in as. We’ll change that by showing users only the
	topics that belong to them.

	Make the following change to the topics() function in views.py:

	--snip--
	@login_required
	def topics(request):
		"""Show all topics."""
		topics = Topic.objects.filter(owner=request.user).order_by('date_added')
		context = {'topics': topics}
		return render(request, 'learning_logs/topics.html', context)
	--snip—

- Protecting a User’s Topics

	We haven’t restricted access to the topic pages yet, so any registered user
	could try a bunch of URLs, like http://localhost:8000/topics/1/, and retrieve
	topic pages that happen to match.

	We’ll fix this now by performing a check before retrieving the requested
	entries in the topic() view function:

	from django.shortcuts import render, redirect
	from django.contrib.auth.decorators import login_required
	from django.http import Http404

	--snip--
	@login_required
	def topic(request, topic_id):
		"""Show a single topic and all its entries."""
		topic = Topic.objects.get(id=topic_id)
		
		# Make sure the topic belongs to the current user.
		if topic.owner != request.user:
			raise Http404

		entries = topic.entry_set.order_by('-date_added')
		context = {'topic': topic, 'entries': entries}
		return render(request, 'learning_logs/topic.html', context)
	--snip--

- Protecting the edit_entry Page

	The edit_entry pages have URLs in the form http://localhost:8000/edit_entry/entry_id/, 	where the entry_id is a number. Let’s protect this page so no one can use the URL to gain 	access to someone else’s entries:

	--snip--
	@login_required
	def edit_entry(request, entry_id):
		"""Edit an existing entry."""
		entry = Entry.objects.get(id=entry_id)
		topic = entry.topic

		if topic.owner != request.user:
			raise Http404
		
		if request.method != 'POST':
		--snip--

- Associating New Topics with the Current User

	Currently, our page for adding new topics is broken, because it doesn’t
	associate new topics with any particular user.

	If you try adding a new topic, you’ll see the error message IntegrityError
	saying you can’t create a new topic without specifying a value
	for the topic’s owner field.

	Add the following code, which associates the new topic with the current user:

	--snip--
	@login_required
	def new_topic(request):
		"""Add a new topic."""
		if request.method != 'POST':
			# No data submitted; create a blank form.
			form = TopicForm()
		else:
			# POST data submitted; process data.
			form = TopicForm(data=request.POST)
			if form.is_valid():
				new_topic = form.save(commit=False)
				new_topic.owner = request.user
				new_topic.save()
				return redirect('learning_logs:topics')
		# Display a blank or invalid form.
		context = {'form': form}
		return render(request, 'learning_logs/new_topic.html', context)
		--snip--
------------------------------------------------------------------------------------------